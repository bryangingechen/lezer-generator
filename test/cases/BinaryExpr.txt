@precedence { mult @left, plus @left }

@top { expr }

expr {
  atom | BinaryExpr
}

BinaryExpr {
  expr !mult MultOp expr |
  expr !plus AddOp expr
}

atom { Symbol | "(" expr ")" }

@tokens {
  MultOp { "*" | "/" }
  AddOp { "+" | "-" }
  Symbol { "x" | "y" }
}

# Parenthesized

(x+y)/x

==> BinaryExpr(BinaryExpr(Symbol,AddOp,Symbol),MultOp,Symbol)

# Associativity

x+x+x+x

==> BinaryExpr(BinaryExpr(BinaryExpr(Symbol,AddOp,Symbol),AddOp,Symbol),AddOp,Symbol)

# Precedence

x+x*x-x

==> BinaryExpr(BinaryExpr(Symbol,AddOp,BinaryExpr(Symbol,MultOp,Symbol)),AddOp,Symbol)

# Mixed precedence

x*x+y/y

==> BinaryExpr(BinaryExpr(Symbol,MultOp,Symbol),AddOp,BinaryExpr(Symbol,MultOp,Symbol))

# Duplicate operator

x++y

==> BinaryExpr(Symbol,AddOp,⚠(AddOp),Symbol)

# Dropped character 

x%+y

==> BinaryExpr(Symbol,⚠,AddOp,Symbol)

# Missing operator

xy

==> BinaryExpr(Symbol,⚠,Symbol)
